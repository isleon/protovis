@startuml

'skinparam monochrome true
'skinparam classBackgroundColor White
skinparam classArrowColor Black
skinparam classBorderColor Black
skinparam stereotypeCBackgroundColor Gray
'hide members
hide circle

class Mark {
    ~defaults : Mark
    scene : []
    -parent : Mark
    -root : Mark
    ~children : Mark[]
    ~properties
    index : int
    ~childIndex : int
    +scale : int
    +sibling() : Mark
    +property(name, cast) : this
    +anchor(name)
    +add(mark)
    '+def(name, v)
    ~bind(mark)
    ~build() : this
    +render()
}

class Wedge {
    '-cousin()
}
Mark <|-- Anchor
Mark <|-- Area
Mark <|-- Bar
Mark <|-- Dot
Mark <|-- Image
Mark <|-- Label
Mark <|-- Line
Mark <|-- Panel
Mark <|-- Rule
Mark <|-- Wedge
Mark -l-> SvgScene
Mark .r.> Anchor

class Layout
Layout <|-- Hierarchy 
Layout <|-- Network
Layout <|-- Bullet
Layout <|-- Grid
Layout <|-- Horizon
Layout <|-- Stack
Layout <|-- Tree
Hierarchy --|> Network
Hierarchy <|-- Cluster
Hierarchy <|-- Indent
Hierarchy <|-- Pack
Hierarchy <|-- Partition
Hierarchy <|-- Treemap
Network <|-- Arc
Network <|-- Force
Network <|-- Matrix
Network <|-- Rollup
Fill --|> Partition 

class colors
colors <|-- category10
colors <|-- category19
colors <|-- category20

class ordinal 

class SvgScene {
    -undefined : function
    -svgns : string
    +scale : 1
    events : []
    -implicit : {}
    +updateAll(scenes)
    +create(type) : HtmlElement
    ~expect(e, type, attributes, style)
    append(e, scenes, index)
    title(e, s)
    dispatch()
    removeSiblings(e)
}
SvgScene <|-- SvgArea
SvgScene <|-- SvgBar
SvgScene <|-- SvgCurve
SvgScene <|-- SvgDot
SvgScene <|-- SvgImage
SvgScene <|-- SvgLabel
SvgScene <|-- SvgLine
SvgScene <|-- SvgPanel
SvgScene <|-- SvgRule
SvgScene <|-- SvgWedge


@enduml